name: Build and Push Docker Image

on:
  push:
    branches:
      - main  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image'
        required: true
        default: 'latest'
  repository_dispatch:
    types: [docker-image-updated]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: "mahmoudazaid"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: ~/.cache/docker
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Set version from repository_dispatch payload if triggered by android-build-tools
    - name: Set Version from Dispatch Event
      if: github.event_name == 'repository_dispatch'
      run: |
        VERSION="${{ github.event.client_payload.version }}"
        BUILD_TOOLS_VERSION="${{ github.event.client_payload.build_tools_version }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "BUILD_TOOLS_VERSION=$BUILD_TOOLS_VERSION" >> $GITHUB_ENV

    # Extract version from Dockerfile if not set by dispatch
    - name: Extract version from Dockerfile (if not set by dispatch)
      id: extract_version
      if: env.VERSION == ''
      run: |
        VERSION=$(grep -m 1 'LABEL version' Dockerfile | cut -d '=' -f2 | tr -d '"')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Extract build tools version from Dockerfile if available
    - name: Extract build tools version from Dockerfile
      id: extract_build_tools
      run: |
        BUILD_TOOLS_VERSION=$(grep -m 1 'ENV BUILD_TOOLS' Dockerfile | cut -d '=' -f2 | tr -d '"')
        echo "BUILD_TOOLS_VERSION=$BUILD_TOOLS_VERSION" >> $GITHUB_ENV

    # Build Docker images with version and build tools version
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }} .
        docker build -t ${{ env.DOCKER_USERNAME }}/android:latest .
        
        if [ -n "$BUILD_TOOLS_VERSION" ]; then
          docker build -t ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }} .
        fi

    # Pass image details for next jobs
    outputs:
      image_version: ${{ steps.extract_version.outputs.VERSION }}
      build_tools_version: ${{ steps.extract_build_tools.outputs.BUILD_TOOLS_VERSION }}

  scan:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_SCOUT_URL: https://github.com/docker/scout-cli/releases/download/v1.15.0/docker-scout_1.15.0_linux_amd64.tar.gz

    steps:
    - name: Install Docker Scout
      run: |
        curl -fsSL ${{ env.DOCKER_SCOUT_URL }} | tar xz -C /usr/local/bin
        sudo chmod +x /usr/local/bin/docker-scout
        docker-scout version

    # Run Docker Scout to scan images
    - name: Run Docker Scout to scan the images
      run: |
        docker-scout cves ${{ env.DOCKER_USERNAME }}/android:${{ needs.build.outputs.image_version }}
        docker-scout cves ${{ env.DOCKER_USERNAME }}/android:latest
        if [ -n "${{ needs.build.outputs.build_tools_version }}" ]; then
          docker-scout cves ${{ env.DOCKER_USERNAME }}/android:${{ needs.build.outputs.image_version }}-${{ needs.build.outputs.build_tools_version }}
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: [build, scan]
    env:
      DOCKER_USERNAME: "mahmoudazaid"

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push Docker images to Docker Hub
    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_USERNAME }}/android:${{ needs.build.outputs.image_version }}
        docker push ${{ env.DOCKER_USERNAME }}/android:latest
        if [ -n "${{ needs.build.outputs.build_tools_version }}" ]; then
          docker push ${{ env.DOCKER_USERNAME }}/android:${{ needs.build.outputs.image_version }}-${{ needs.build.outputs.build_tools_version }}
        fi

    # Clean up Docker images to free space
    - name: Clean up Docker images
      run: |
        docker image prune -af
