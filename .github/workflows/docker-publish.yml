name: Build and Push Docker Image

on:
  push:
    branches:
      - main  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image'
        required: true
        default: 'latest'
  repository_dispatch:
    types: [docker-image-updated]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: "mahmoudazaid"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: ~/.cache/docker
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Set version from repository_dispatch payload (triggered by android-build-tools)
    - name: Set Version from Dispatch Event
      if: github.event_name == 'repository_dispatch'
      run: |
        VERSION="${{ github.event.client_payload.version }}"
        BUILD_TOOLS_VERSION="${{ github.event.client_payload.build_tools_version }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "BUILD_TOOLS_VERSION=$BUILD_TOOLS_VERSION" >> $GITHUB_ENV

    # Extract version from Dockerfile if it's not set by dispatch
    - name: Extract version from Dockerfile (if not set by dispatch)
      id: extract_version
      if: env.VERSION == ''
      run: |
        VERSION=$(grep -m 1 'LABEL version' Dockerfile | cut -d '=' -f2 | tr -d '"')
        echo "VERSION=$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Extract build tools version from Dockerfile (if available)
    - name: Extract build tools version from Dockerfile
      id: extract_build_tools
      run: |
        BUILD_TOOLS_VERSION=$(grep -m 1 'ENV BUILD_TOOLS' Dockerfile | cut -d '=' -f2 | tr -d '"')
        echo "BUILD_TOOLS_VERSION=$BUILD_TOOLS_VERSION"
        echo "BUILD_TOOLS_VERSION=$BUILD_TOOLS_VERSION" >> $GITHUB_ENV

    # Build the Docker image based on version and build tools version
    - name: Build Docker image
      run: |
        if [ -z "$BUILD_TOOLS_VERSION" ]; then
          # Case where no build tools version is available (manual trigger or fallback)
          docker build -t ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }} .
          docker build -t ${{ env.DOCKER_USERNAME }}/appium:${{ env.VERSION }} .
        else
          # Case where both version and build tools version are available
          docker build -t ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }} .
          docker build -t ${{ env.DOCKER_USERNAME }}/appium:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }} .
        fi
        docker build -t ${{ env.DOCKER_USERNAME }}/android:latest .
        docker build -t ${{ env.DOCKER_USERNAME }}/appium:latest .

    # Run Docker Scout to scan the image for vulnerabilities
    - name: Run Docker Scout to scan the image for vulnerabilities
      run: |
        docker-scout cves ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }}
        docker-scout cves ${{ env.DOCKER_USERNAME }}/appium:${{ env.VERSION }}
        if [ -n "$BUILD_TOOLS_VERSION" ]; then
          docker-scout cves ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }}
          docker-scout cves ${{ env.DOCKER_USERNAME }}/appium:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }}
        fi

    # Push Docker images to Docker Hub
    - name: Push Docker image
      run: |
        if [ -z "$BUILD_TOOLS_VERSION" ]; then
          docker push ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }}
          docker push ${{ env.DOCKER_USERNAME }}/appium:${{ env.VERSION }}
        else
          docker push ${{ env.DOCKER_USERNAME }}/android:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }}
          docker push ${{ env.DOCKER_USERNAME }}/appium:${{ env.VERSION }}-${{ env.BUILD_TOOLS_VERSION }}
        fi
        docker push ${{ env.DOCKER_USERNAME }}/android:latest
        docker push ${{ env.DOCKER_USERNAME }}/appium:latest

    # Clean up Docker images to free space
    - name: Clean up Docker images
      run: |
        docker image prune -af